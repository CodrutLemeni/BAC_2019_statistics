In implementarea mea am ales sa construiesc un factory pentru abilitati intrucat
majoritatea constantelor necesare rezolvarii problemei tin de Abilitati.
Bineinteles, am 8 abilitati care mostenesc clasa Ability si difera de aceasta prin
anumite particularitati(au/nu au damage overtime, critical hit, etc)
La fel pentru Field urile de pe mapa pe care se desfasoara jocul, am 4 clase
diferite(Land, Volcanic, Woods, Desert).

Harta este o matrice de tipul Field si ma folosesc de polimorfism pentru implementarea jocului.
Aici intervine Double Dispatch. Am implementat Visitor Pattern atat intre abilitati si jucatori
cat si intre abilitati si player(cand o abilitatea afecteaza cumva un plater, il viziteaza)

Astfel metodele accept din clasa Field(implementeaza FieldVisitor) si din Player se ocupa de conflictele
intre jucatori. Practic, dupa ce mut jucatorii(clasa RoundSimulator este cea care se ocupa de
derularea jocului), mai intai iau bonusurile de teren(getFieldsBonus()), iar apoi, in solveConflicts(),
verific daca doi jucatori sunt in aceeasi casuta de pe harta si ma folosesc de VisitorPattern pentru ca 
abilitatile unuia sa ii dea damage-ul necesar celuilalt si vice-versa.

Agregarea claselor Player si Ability a fost folosita intrucat de multe ori avem nevoie
de informatii despre abilitatile unui anumit Player(De ex in Deflect, cand se ataca un Rogue,
trebuie sa se stie daca Paraltsis va da sau nu critica, etc)
